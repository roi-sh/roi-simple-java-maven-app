name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: "roish1/simple-java-maven-app"
    
    steps:
      - name: Checkout code # This step checks out the code from the repository so that the pipeline can work with it.
        uses: actions/checkout@v3

      - name: Set up Java # This step sets up Java using the Temurin distribution (Adoptium) with version 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Get Latest Version Tag
        id: versioning
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "1.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_TAG"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Build JAR with Maven
        run: mvn clean package

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_REPO:latest .
          docker tag $DOCKER_REPO:latest $DOCKER_REPO:${{ env.NEW_VERSION }}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker push $DOCKER_REPO:latest
          docker push $DOCKER_REPO:${{ env.NEW_VERSION }}
    deploy:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Install SSH Key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

        - name: Deploy to EC2
          run: |
            ssh -o StrictHostKeyChecking=no \
                -i ${{ secrets.SSH_PRIVATE_KEY_PATH }} \
                ubuntu@51.20.109.176 << 'EOF'
            # Pull the latest Docker image
            docker pull ${{ env.DOCKER_REPO }}:latest

            # Stop and remove the existing container (if running)
            docker stop my-app || true
            docker rm my-app || true

            # Run the new container
            docker run -d \
              --name my-app \
              ${{ env.DOCKER_REPO }}:latest
            EOF
